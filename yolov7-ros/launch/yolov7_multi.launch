<launch>
    <!-- 1 : Emergency -->
    <!-- 2 : Traffic -->


    <!-- Emergency -->
    <group ns="camera1">
    <node name="usb_cam1" pkg="usb_cam" type="usb_cam_node" output="screen" >
        <param name="video_device" value="/dev/video2" />
        <param name="image_width" value="640" />
        <param name="image_height" value="480" />
        <param name="pixel_format" value="yuyv" />
        <param name="framerate" value="30"/>
        <param name="camera_frame_id" value="usb_cam" />
        <param name="io_method" value="mmap"/>
        <param name="brightness" value="180"/>
        <param name="saturation" value="150"/>

    </node>
    <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
        <remap from="image1" to="/camera1/usb_cam1/image_raw"/>
        <param name="autosize" value="true" />
    </node>
    </group>
    
    <!-- Traffic -->
    <group ns="camera2">
    <node name="usb_cam2" pkg="usb_cam" type="usb_cam_node" output="screen" >
        <param name="video_device" value="/dev/video0" />
        <param name="image_width" value="640" />
        <param name="image_height" value="480" />
        <param name="pixel_format" value="yuyv" />
        <param name="framerate" value="30"/>
        <param name="camera_frame_id" value="usb_cam" />
        <param name="io_method" value="mmap"/>
        <param name="brightness" value="180"/>
        <param name="saturation" value="150"/>
    </node>
    <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
        <remap from="image2" to="/camera2/usb_cam2/image_raw"/>
        <param name="autosize" value="true" />
    </node>
    </group>
    
    <!-- yolov7 for cam 1 -->
    <node pkg="yolov7_ros" type="detect_ros_final_multi_emergency.py" name="detect" output="screen" ns="yolov7">
        <!-- Download the official weights from the original repo -->
        <param name="weights_path" type="str"
        value="/home/foscar/FMTC_2022/src/yolov7-ros/weights/emergency_only_best.pt"/>
        
        <!-- Path to a class_labels.txt file containing your desired class labels. The i-th entry corresponds to the i-th class id. 
        For example, in coco class label 0 corresponds to 'person'. Files for the coco and berkeley deep drive datasets are provided in the 'class_labels/' directory. 
        If you leave it empty then no class labels are visualized.-->
        <param name="classes_path" type="str" value="/home/foscar/FMTC_2022/src/yolov7-ros/class_labels/Emergency_only.txt" />
        <!-- topic name to subscribe to -->
        <param name="image1" type="str" value="/camera1/usb_cam1/image_raw" />
         <!-- topic name for the detection output -->
        <param name="out_topic" type="str" value="yolov7" />
        <!-- confidence threshold 0.35 -->
        <param name="conf_thresh" type="double" value="0.35"/> 
        <!-- intersection over union threshold 0.45 -->
        <param name="iou_thresh" type="double" value="0.45" />
        <!-- queue size for publishing --> 
        <param name="queue_size" type="int" value="1" />
        <!-- image size to which to resize each input image before feeding into the
        network (the final output is rescaled to the original image size) -->
        <param name="img_size" type="int" value="640" />
        <!-- flag whether to also publish image with the visualized detections -->
        <param name="visualize" type="bool" value="true" />
        <!-- 'cuda' or 'cpu' -->
        <param name="device" type="str" value="cuda" />
        <!-- <we make> -->
        <!-- <param name="class" type="int" value="-1"> -->
    </node>

    <!-- yolov7 for cam 2 -->
    <node pkg="yolov7_ros" type="detect_ros_final_multi_traffic.py" name="detect2" output="screen" ns="yolov7">
        <!-- Download the official weights from the original repo -->
        <param name="weights_path" type="str"
        value="/home/foscar/FMTC_2022/src/yolov7-ros/weights/real_jjin_final_best.pt"/>
        
        <!-- Path to a class_labels.txt file containing your desired class labels. The i-th entry corresponds to the i-th class id. 
        For example, in coco class label 0 corresponds to 'person'. Files for the coco and berkeley deep drive datasets are provided in the 'class_labels/' directory. 
        If you leave it empty then no class labels are visualized.-->
        <param name="classes_path" type="str" value="/home/foscar/FMTC_2022/src/yolov7-ros/class_labels/Classes_traffic.txt" />
        <!-- topic name to subscribe to -->
        <param name="image2" type="str" value="/camera2/usb_cam2/image_raw" />
         <!-- topic name for the detection output -->
        <param name="out_topic" type="str" value="yolov7" />
        <!-- confidence threshold -->
        <param name="conf_thresh" type="double" value="0.35" />
        <!-- intersection over union threshold -->
        <param name="iou_thresh" type="double" value="0.45" />
        <!-- queue size for publishing --> 
        <param name="queue_size" type="int" value="1" />
        <!-- image size to which to resize each input image before feeding into the
        network (the final output is rescaled to the original image size) -->
        <param name="img_size" type="int" value="640" />
        <!-- flag whether to also publish image with the visualized detections -->
        <param name="visualize" type="bool" value="true" />
        <!-- 'cuda' or 'cpu' -->
        <param name="device" type="str" value="cuda" />
        <!-- <we make> -->
        <!-- <param name="class" type="int" value="-1"> -->
    </node>





    <!-- yolov7 visualization in cam -->
    <node name="YOLOV7" pkg="image_view" type="image_view" respawn="false" output="screen">
        <remap from="image" to="/yolov7/yolov7/visualization_traffic"/>
        <param name="autosize" value="true" />
    </node>
    
    <node name="YOLOV71" pkg="image_view" type="image_view" respawn="false" output="screen">
        <remap from="image" to="/yolov7/yolov7/visualization_emergency"/>
        <param name="autosize" value="true" />
    </node>
</launch>
